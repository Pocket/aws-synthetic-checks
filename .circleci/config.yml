version: 2.1

# The setup field enables you to conditionally trigger configurations from outside the primary .circleci parent directory,
# update pipeline parameters, or generate customized configurations.
setup: true

orbs:
  pocket: pocket/circleci-orbs@2.1.1

# Workflow shortcuts
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

only_dev_main: &only_dev_main
  filters:
    branches:
      only:
        - dev
        - main

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

jobs:
  build:
    docker:
      - image: cimg/node:18.16
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: install node modules
          command: npm ci
      - run:
          name: Run Build
          command: |
            export NODE_ENV=production
            npm run build
      - run:
          name: Setup workspace
          command: |
            mkdir -p /tmp/workspace/app_prod
            cp -r ./node_modules package.json ./dist /tmp/workspace/app_prod
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - app_prod

  tf:
    description: "perform terraform commands on self-hosted runners"
    parameters:
      action:
        default: validate
        type: string
      node_env:
        default: "production"
        type: string
      resource_class:
        default: "pocket/default-prod"
        type: string
      tf_workspace:
        default: "Prod"
        type: string
    environment:
      TF_WORKSPACE: << parameters.tf_workspace >>
    machine: true
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: 
          name: Terraform Setup
          command: |
            . /home/circleci/.codebuild_shims_wrapper.sh
            cd .aws
            nvm install
            npm ci
            tfenv install
            export NODE_ENV=<< parameters.node_env >>
            npm run synth
      - run:
          name: Terraform Cloud Login
          command: |
            rc="credentials \"app.terraform.io\" { ${rc} token=\"$TERRAFORM_TOKEN\" ${rc}}"
            echo "$rc" > ~/.terraformrc
            echo "//npm.pkg.github.com/:_authToken=${GITHUB_ACCESS_TOKEN}" > ~/.npmrc
      - when: 
          condition: 
            equal: ["apply", << parameters.action >>]
          steps:
            - run:
                name: Terraform Apply
                command: |
                  cd .aws/cdktf.out/stacks/syntheticchecks
                  terraform init
                  terraform apply -auto-approve
      - when: 
          condition: 
            equal: ["plan", << parameters.action >>]
          steps:
            - run:
                name: Terraform Plan
                command: |
                  cd .aws/cdktf.out/stacks/syntheticchecks
                  terraform init
                  terraform plan -lock=false
      - when: 
          condition: 
            equal: ["validate", << parameters.action >>]
          steps:
            - run:
                name: Terraform Validate (no state)
                command: |
                  cd .aws/cdktf.out/stacks/syntheticchecks
                  terraform init --backend=false
                  terraform validate

  upload_zip_to_s3:
    description: "upload zip file to S3"
    parameters:
      env_lower:
        type: string
        description: The lower case env name
      resource_class:
        default: "pocket/default-prod"
        type: string
    machine: true
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run:
          name: create zip file
          command: |
            nvm install
            npm ci
            npm run build
            npm run zip
      - run:
          name: upload zip file to S3 bucket
          command: |
            cd tmp-dist/synthetics-export
            aws s3 cp "aws-synthetic.zip" s3://pocket-syntheticchecks-<< parameters.env_lower >>

workflows:
  all:
    jobs:
      # CI
      - build

      - tf:
          <<: *not_dev_main
          action: validate
          name: tf_validate_dev
          node_env: development
          resource_class: pocket/default-dev
          tf_workspace: Dev

      - tf:
          <<: *not_dev_main
          action: validate
          name: tf_validate_prod

      # Dev
      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: ${SERVICE_NAME}

      - tf:
          <<: *not_dev_main
          action: plan
          context: pocket
          name: tf_plan_dev
          node_env: development
          requires:
            - tf_validate_dev
          resource_class: pocket/default-dev
          tf_workspace: Dev

      - tf:
          <<: *only_dev
          action: apply
          context: pocket
          name: tf_apply_dev
          node_env: development
          requires:
            - tf_plan_dev
          resource_class: pocket/default-dev
          tf_workspace: Dev

      - upload_zip_to_s3:
          <<: *only_dev
          context: pocket
          env_lower: dev
          name: upload_zip_to_s3_dev
          requires:
            - build
            - setup-deploy-params-dev
            - tf_apply_dev

      # Prod
      - pocket/setup_deploy_params:
          <<: *only_main
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          name: setup-deploy-params-prod
          service_name: ${SERVICE_NAME}

      - tf:
          <<: *not_dev_main
          action: plan
          context: pocket
          name: tf_plan_prod
          requires:
            - tf_validate_prod

      - tf:
          <<: *only_main
          action: apply
          context: pocket
          name: tf_apply_prod
          requires:
            - tf_plan_prod

      - upload_zip_to_s3:
          <<: *only_main
          context: pocket
          env_lower: prod
          name: upload_zip_to_s3_prod
          requires:
            - build
            - setup-deploy-params-prod
            - tf_apply_prod
