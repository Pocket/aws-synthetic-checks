version: 2.1

# The setup field enables you to conditionally trigger configurations from outside the primary .circleci parent directory,
# update pipeline parameters, or generate customized configurations.
setup: true

orbs:
  pocket: pocket/circleci-orbs@2.2.0
  backstage-entity-validator: roadiehq/backstage-entity-validator@0.4.2
  aws-cli: circleci/aws-cli@4.0.0

# Workflow shortcuts
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

only_dev_main: &only_dev_main
  filters:
    branches:
      only:
        - dev
        - main

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

jobs:
  build:
    docker:
      - image: cimg/node:18.17.0@sha256:f7b0fe6a1735000db6ef20c7b715defb8108ab93ae0823dc4dd6fa8bc7801272
    steps:
      - checkout
      # Define the working directory for this job
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: install node modules
          command: npm ci
      - run:
          name: Run Build
          command: |
            export NODE_ENV=production
            npm run build
      # Copy built files to app_prod folder
      - run:
          name: Setup workspace
          command: |
            mkdir -p /tmp/workspace/app_prod
            cp -r ./node_modules package.json ./dist /tmp/workspace/app_prod
      # Persist built files to workspace
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - app_prod
  run_code_build:
    description: run codebuild to apply infrastructure
    parameters:
      env_lower_name:
        type: string
        description: The lower case env name
      env_capital_name:
        description: The env capital name
        type: string
      codebuild_project_name:
        type: string
        description: The CodeBuild project name
        default: ""
      codebuild_project_branch:
        type: string
        description: The git branch to build
        default: ""
      deploy:
        type: boolean
        default: false
    docker:
      - image: cimg/node:18.17.0@sha256:f7b0fe6a1735000db6ef20c7b715defb8108ab93ae0823dc4dd6fa8bc7801272
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - aws-cli/setup:
          aws-access-key-id: << parameters.env_capital_name >>_AWS_ACCESS_KEY
          aws-secret-access-key: << parameters.env_capital_name >>_AWS_SECRET_ACCESS_KEY
          aws-region: << parameters.env_capital_name >>_AWS_DEFAULT_REGION
      - run:
          name: Setup CodeBuild environment variables
          command: |
            { \
            echo 'export CODEBUILD_PROJECT_NAME="<< parameters.codebuild_project_name >>"'; \
            echo 'export CODEBUILD_PROJECT_BRANCH="<< parameters.codebuild_project_branch >>"'; \
            } >> "$BASH_ENV"
      - run:
          name: Run CodeBuild
          command: |
            echo -e "Starting CodeBuild for ${CODEBUILD_PROJECT_NAME}.\n"
            BUILD_ID=$(aws codebuild start-build --project-name "$CODEBUILD_PROJECT_NAME" --environment-variables-override name=GIT_BRANCH,value="$CODEBUILD_PROJECT_BRANCH" --source-version "$CODEBUILD_PROJECT_BRANCH" --query 'build.id' --output text)
            BUILD_STATUS="IN_PROGRESS"
            # Wait for the CodeBuild to complete.
            while [ "$BUILD_STATUS" == "IN_PROGRESS" ]; do
              sleep 10
              echo "Checking build status"
              BUILD_STATUS=$(aws codebuild batch-get-builds --ids "$BUILD_ID" --query 'builds[0].buildStatus' --output text)
              if [ "$BUILD_STATUS" == "IN_PROGRESS" ]; then
                echo -e "Build is ${BUILD_STATUS}, waiting for build to complete...waiting for 10 seconds before next check...\n"
              fi
            done
            if [ "$BUILD_STATUS" != "SUCCEEDED" ]; then
              echo "CodeBuild failed to succeed with status ${BUILD_STATUS}"
              exit 1
            else
              echo -e "CodeBuild succeeded\n"
            fi
      - store_artifacts:
          path: /tmp/build.zip
  upload_zip_to_s3:
    description: upload zip file to S3
    parameters:
      env_lower_name:
        type: string
        description: The lower case env name
      env_capital_name:
        description: The env capital name
        type: string
    docker:
      - image: cimg/node:18.17.0@sha256:f7b0fe6a1735000db6ef20c7b715defb8108ab93ae0823dc4dd6fa8bc7801272
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: create zip file
          command: |
            npm ci
            npm run build
            rm -rf tmp-dist/synthetics-export && mkdir -p tmp-dist/synthetics-export/nodejs && cp -r dist/nodejs/node_modules/ tmp-dist/synthetics-export/nodejs/node_modules &&  cd tmp-dist/synthetics-export && zip "$CIRCLE_SHA1-aws-synthetic-<< parameters.env_lower_name >>.zip" -r nodejs
      - aws-cli/setup:
          aws-access-key-id: << parameters.env_capital_name >>_AWS_ACCESS_KEY
          aws-secret-access-key: << parameters.env_capital_name >>_AWS_SECRET_ACCESS_KEY
          aws-region: << parameters.env_capital_name >>_AWS_DEFAULT_REGION
      - run:
          name: upload zip file (1 for use, 1 for release tracking) to S3 bucket
          command: |
            cd tmp-dist/synthetics-export
            cp "$CIRCLE_SHA1-aws-synthetic-<< parameters.env_lower_name >>.zip" "aws-synthetic-<< parameters.env_lower_name >>.zip"
            aws s3 cp "aws-synthetic-<< parameters.env_lower_name >>.zip" s3://pocket-syntheticchecks-<< parameters.env_lower_name >>
            aws s3 cp "$CIRCLE_SHA1-aws-synthetic-<< parameters.env_lower_name >>.zip" s3://pocket-syntheticchecks-<< parameters.env_lower_name >>

workflows:
  all:
    jobs:
      - build
      # Dev
      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: ${SERVICE_NAME}
      # Dev
      - run_code_build:
          <<: *only_dev
          context: pocket
          name: run_dev_code_build
          codebuild_project_name: SyntheticChecks-Dev
          codebuild_project_branch: dev
          env_lower_name: dev
          env_capital_name: Dev
      # Dev
      - upload_zip_to_s3:
          <<: *only_dev
          requires:
            - build
            - setup-deploy-params-dev
            - run_dev_code_build
          context: pocket
          name: upload_zip_to_s3_dev
          env_lower_name: dev
          env_capital_name: Dev
      # Prod
      - pocket/setup_deploy_params:
          <<: *only_main
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: ${SERVICE_NAME}
      # Prod
      - run_code_build:
          <<: *only_main
          context: pocket
          name: run_prod_code_build
          codebuild_project_name: SyntheticChecks-Prod
          codebuild_project_branch: main
          env_lower_name: prod
          env_capital_name: Prod
      # Prod
      - upload_zip_to_s3:
          <<: *only_main
          requires:
            - build
            - setup-deploy-params-prod
            - run_prod_code_build
          context: pocket
          name: upload_zip_to_s3_prod
          env_lower_name: prod
          env_capital_name: Prod
